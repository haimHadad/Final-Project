using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Util;
using Nethereum.Web3;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Threading.Tasks;


namespace FinalProject.Models
{
    public class SmartContractService
    {
        public string ContractAddress;

        public Web3 Blockchain { get; set; }

        //public static string ABI = @"[{""constant"":false,""inputs"":[],""name"":""denyContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""setIsExpired"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""cancelContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""internalType"":""uint256"",""name"":""_taxPay"",""type"":""uint256""}],""name"":""approveAndExcecuteContract"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAssetDetails"",""outputs"":[{""internalType"":""uint256"",""name"":""AssetID"",""type"":""uint256""},{""internalType"":""string"",""name"":""AssetLoaction"",""type"":""string""},{""internalType"":""uint256"",""name"":""AssetRooms"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""AssetAreaIn"",""type"":""uint256""},{""internalType"":""string"",""name"":""AssetImageURL"",""type"":""string""},{""internalType"":""uint256"",""name"":""AssetPrice"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getOldAssetOwner"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getContractBalance"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""abortContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAssetBuyer"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getOwnerSigning"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getIsExpired"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""setBuyerSigning"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getNewAssetOwner"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isTimerOver"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""TimeLeft"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getBuyerSigning"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""uint256"",""name"":""_timeToBeOpen"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""_Id"",""type"":""uint256""},{""internalType"":""string"",""name"":""_Loaction"",""type"":""string""},{""internalType"":""uint256"",""name"":""_Rooms"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""_AreaIn"",""type"":""uint256""},{""internalType"":""string"",""name"":""_Image"",""type"":""string""},{""internalType"":""uint256"",""name"":""_price"",""type"":""uint256""},{""internalType"":""address payable"",""name"":""_buyer"",""type"":""address""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""payable"":true,""stateMutability"":""payable"",""type"":""fallback""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""}],""name"":""notifyNewOffer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""}],""name"":""notifyContractApproved"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toGovrenment"",""type"":""address""}],""name"":""notifyContractSigned"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""fromBuyer"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""}],""name"":""notifyDenyOffer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""codeAction"",""type"":""uint256""}],""name"":""notifyCancelOffer"",""type"":""event""}]";

        public static string ABI = @"[{""constant"":false,""inputs"":[],""name"":""denyContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""setIsExpired"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""cancelContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getGovrenmentSigning"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getTax"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""internalType"":""uint256"",""name"":""_taxPay"",""type"":""uint256""}],""name"":""approveAndExcecuteContract"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAssetDetails"",""outputs"":[{""internalType"":""uint256"",""name"":""AssetID"",""type"":""uint256""},{""internalType"":""string"",""name"":""AssetLoaction"",""type"":""string""},{""internalType"":""uint256"",""name"":""AssetRooms"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""AssetAreaIn"",""type"":""uint256""},{""internalType"":""string"",""name"":""AssetImageURL"",""type"":""string""},{""internalType"":""uint256"",""name"":""AssetPrice"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getOldAssetOwner"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getContractBalance"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""abortContract"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAssetBuyer"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getOwnerSigning"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getIsExpired"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""setBuyerSigning"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getNewAssetOwner"",""outputs"":[{""internalType"":""address"",""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isTimerOver"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""TimeLeft"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getBuyerSigning"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""uint256"",""name"":""_timeToBeOpen"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""_Id"",""type"":""uint256""},{""internalType"":""string"",""name"":""_Loaction"",""type"":""string""},{""internalType"":""uint256"",""name"":""_Rooms"",""type"":""uint256""},{""internalType"":""uint256"",""name"":""_AreaIn"",""type"":""uint256""},{""internalType"":""string"",""name"":""_Image"",""type"":""string""},{""internalType"":""uint256"",""name"":""_price"",""type"":""uint256""},{""internalType"":""address payable"",""name"":""_buyer"",""type"":""address""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""payable"":true,""stateMutability"":""payable"",""type"":""fallback""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""}],""name"":""notifyNewOffer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""}],""name"":""notifyContractApproved"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toGovrenment"",""type"":""address""}],""name"":""notifyContractSigned"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""fromBuyer"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""}],""name"":""notifyDenyOffer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""internalType"":""address"",""name"":""fromContract"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toBuyer"",""type"":""address""},{""indexed"":false,""internalType"":""address"",""name"":""toSeller"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""codeAction"",""type"":""uint256""}],""name"":""notifyCancelOffer"",""type"":""event""}]";

        //public static string ByteCode = "";

        public static string ByteCode = "";

        public DappAccount accountCaller { get; set; }

        public string EtherscanURL;

        Contract deployedContractIsntance;

        public SmartContractService(DappAccount _yourAccount, string contractAddress)
        {
            accountCaller = _yourAccount;
            EtherscanURL = "https://ropsten.etherscan.io/address/" + contractAddress;
            deployedContractIsntance = accountCaller.Blockchain.Eth.GetContract(ABI, contractAddress);
            ContractAddress = contractAddress;
        }

        public static async Task<string> Deploy(DappAccount yourAccount, uint hoursTimeAmount, uint assetID, string assetLoaction, uint assetRooms, uint assetAreaIn, string assetURL, double assetPrice, string buyerAddress)
        {
            var TimeHours = hoursTimeAmount;
            var ID = assetID;
            var Loaction = assetLoaction;
            var Rooms = assetRooms;
            var AreaIn = assetAreaIn;
            var Image = assetURL;
            var Price = UnitConversion.Convert.ToWei(assetPrice);
            var Buyer = buyerAddress;

            object[] contractParams = new object[] { TimeHours, ID, Loaction, Rooms, AreaIn, Image, Price, Buyer };

            //-----------------Seller create a contract and sign it---------------------
            var estimateGasForDeploy = await yourAccount.Blockchain.Eth.DeployContract.EstimateGasAsync(ABI, ByteCode, yourAccount.publicKey, contractParams);
            var receiptSalesContract = await yourAccount.Blockchain.Eth.DeployContract.SendRequestAndWaitForReceiptAsync(ABI, ByteCode, yourAccount.publicKey, estimateGasForDeploy, null, contractParams);
            var salesContractAddress = receiptSalesContract.ContractAddress; //after deployment, we get contract address. 
            return salesContractAddress;
        }

        public static async Task<string> Deploy(DappAccount yourAccount, ContractOffer offer)
        {
            uint hoursTimeAmount = (uint)offer.TimeToBeOpen;
            uint assetID = (uint)offer.AssetID;
            string assetLoaction = offer.Loaction;
            uint assetRooms = (uint)offer.Rooms;
            uint assetAreaIn = (uint)offer.AreaIn;
            string assetURL = offer.ImageURL;
            double assetPrice = (uint)offer.PriceETH;
            string buyerAddress = offer.BuyerPublicKey;
            var ContractAddresss = await Deploy(yourAccount, hoursTimeAmount, assetID, assetLoaction, assetRooms, assetAreaIn, assetURL, assetPrice, buyerAddress);
            return ContractAddresss;
        }





        public async Task<Asset> getAssetDestails() //Buyer the asset that included in the deal
        {
            var contractHandlerAsBuyer = accountCaller.Blockchain.Eth.GetContractHandler(ContractAddress);
            var getAssetDetailsOutputDTO = await contractHandlerAsBuyer.QueryDeserializingToObjectAsync<GetAssetDetailsFunction, GetAssetDetailsOutputDTO>();
            BigInteger assetID = getAssetDetailsOutputDTO.AssetID;
            string assetLoaction = getAssetDetailsOutputDTO.AssetLoaction;
            BigInteger assetRooms = getAssetDetailsOutputDTO.AssetRooms;
            BigInteger assetAreaIn = getAssetDetailsOutputDTO.AssetAreaIn;
            string assetImageUrl = getAssetDetailsOutputDTO.AssetImageURL;
            BigInteger assetPriceAtWie = getAssetDetailsOutputDTO.AssetPrice;
            var assetPriceAtEther = Web3.Convert.FromWei(assetPriceAtWie);

            Asset AssetFromDeployedContract = new Asset();
            AssetFromDeployedContract.AssetID = (int)assetID;
            AssetFromDeployedContract.Loaction = assetLoaction;
            AssetFromDeployedContract.Rooms = (int)assetRooms;
            AssetFromDeployedContract.AreaIn = (int)assetAreaIn;
            AssetFromDeployedContract.ImageURL = assetImageUrl;
            AssetFromDeployedContract.Price = Convert.ToDouble(assetPriceAtEther);
            return AssetFromDeployedContract;

            //string assetDetialsAllTogether = "" + assetID + ", " + assetLoaction + ", " + assetRooms + ", " + assetAreaIn + ", " + assetImageUrl + ", " + assetPriceAtEther;
        }

        public async Task<string> getBuyerAddress() //get the address of the buyer which included in the deal
        {
            var getAssetBuyerFunction = deployedContractIsntance.GetFunction("getAssetBuyer");
            var assetBuyerAddress = await getAssetBuyerFunction.CallAsync<string>();
            return assetBuyerAddress;
        }

        public async Task<bool> getBuyerSign()
        {
            var getBuyerSigningFunction = deployedContractIsntance.GetFunction("getBuyerSigning");
            var buyerSign = await getBuyerSigningFunction.CallAsync<bool>();
            return buyerSign;
        }

        public async Task<bool> getSellerSign()
        {
            var getSellerSigningFunction = deployedContractIsntance.GetFunction("getOwnerSigning");
            var ownerSign = await getSellerSigningFunction.CallAsync<bool>();
            return ownerSign;
        }

        public async Task<bool> getRegulatorSign()
        {
            var getRegulatorSigningFunction = deployedContractIsntance.GetFunction("getGovrenmentSigning");
            var regulaotrSign = await getRegulatorSigningFunction.CallAsync<bool>();
            return regulaotrSign;
        }

        public async Task<double> getTax()
        {
            var getTaxFunction = deployedContractIsntance.GetFunction("getTax");
            UInt64 taxAmount = await getTaxFunction.CallAsync<UInt64>();
            var TaxAsDec = Web3.Convert.FromWei(taxAmount);
            double TaxAsDouble = Convert.ToDouble(TaxAsDec);
            return TaxAsDouble;
        }


        public async Task<bool> sendEtherToContract(double amount) //send money to the contract, if fail return false, else true
        {
            try
            {
                decimal EtherToPay = Convert.ToDecimal(amount);
                if (this.getBuyerAddress().Equals(this.accountCaller.publicKey))
                    return false;
                var payTransaction = await accountCaller.Blockchain.Eth.GetEtherTransferService().TransferEtherAndWaitForReceiptAsync(this.ContractAddress, EtherToPay, 4, new BigInteger(45000));

            }
            catch (Exception e) //can fail if the acount not belong to the buyer, or if the didn`t send the exact amount of money
            {
                return false; //send failed;
            }
            return true;
        }

        public async Task<double> getBalance()
        {
            double returnedEther=0;
            var getContractBalanceFunction = deployedContractIsntance.GetFunction("getContractBalance");
            
                var salesContractBalanceAsBuyer = await getContractBalanceFunction.CallAsync<BigInteger>();
                var assetPriceAtEther = Web3.Convert.FromWei(salesContractBalanceAsBuyer);
                returnedEther = Convert.ToDouble(assetPriceAtEther);

            return returnedEther;

        }

        public async Task<string> getNewAssetOwner()
        {
            var getNewAssetOwnerFunction = deployedContractIsntance.GetFunction("getNewAssetOwner");
            var newOwner = await getNewAssetOwnerFunction.CallAsync<string>();
            return newOwner;
        }

        public async Task<string> getOldAssetOwner()
        {
            var getNewAssetOwnerFunction = deployedContractIsntance.GetFunction("getOldAssetOwner");
            var newOwner = await getNewAssetOwnerFunction.CallAsync<string>();
            return newOwner;
        }

        public async Task<ulong> getTimeLeftInSeconds()
        {
            var TimeLeftFunction = deployedContractIsntance.GetFunction("TimeLeft");
            var timeLeft = await TimeLeftFunction.CallAsync<UInt64>();

            return timeLeft;
        }


        public async Task<bool> cancelDeal() //For regulator (=Govrenment)
        {
            string GovrenmentAddress = "0x7988dfD8E9ceCb888C1AeA7Cb416D44C6160Ef80";
            if (!GovrenmentAddress.Equals(accountCaller.publicKey)) //if the caller is not the regulator
                return false;
            try
            {
                var cancelContractFunction = deployedContractIsntance.GetFunction("cancelContract");  //find the method of the contract 
                var gasEstimationForCancel = await cancelContractFunction.EstimateGasAsync(accountCaller.publicKey, null, null);
                var receiptOfCancel = await cancelContractFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey, gasEstimationForCancel, null, null);

            }
            catch (Exception e) //if regulator already signed - I didn`t have energy to right a getter in Solidity....
            {
                return false;
            }
            return true;
        }

        public async Task<bool> approveAndExcecute(double taxPercentage) //for regulator only
        {
            string GovrenmentAddress = "0x7988dfD8E9ceCb888C1AeA7Cb416D44C6160Ef80";
            if (!GovrenmentAddress.Equals(accountCaller.publicKey)) //if the caller is not the regulator
                return false;
            
            try
            {
                double salesContractBalance = await getBalance();
                double contractBalanceAsDouble = Convert.ToDouble(salesContractBalance); ;
                double taxEtherAmountAsDouble = contractBalanceAsDouble * taxPercentage;

                BigInteger taxEtherAmountToPay = UnitConversion.Convert.ToWei(taxEtherAmountAsDouble); 
                bool buyerSign = await getBuyerSign();
                if (buyerSign == true) //check if buyer signed
                {
                    var approveAndExcecuteContractFunction = deployedContractIsntance.GetFunction("approveAndExcecuteContract");  //find the method of the contract 
                    var gasEstimationForApproval = await approveAndExcecuteContractFunction.EstimateGasAsync(accountCaller.publicKey,
                        null, null, taxEtherAmountToPay);
                    var receiptOfApproval = await approveAndExcecuteContractFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey,
                        gasEstimationForApproval, null, null, taxEtherAmountToPay );
                }
                else
                    return false;
            }
            catch (Exception e)
            {
                return false;
            }


            return true;
        }


        public async Task<bool> denyDeal() //for the buyer
        {
            string BuyerAddress = await getBuyerAddress();
            bool BuyerSign = await getBuyerSign();

            if (BuyerSign == true) //if buyer already signed the deal!
                return false;

            if (!BuyerAddress.Equals(accountCaller.publicKey.ToLower())) //if the caller is not the buyer
                return false;
            try
            {
                var denyContractFunction = deployedContractIsntance.GetFunction("denyContract");  //find the method of the contract 
                var gasEstimationForCancel = await denyContractFunction.EstimateGasAsync(accountCaller.publicKey, null, null);
                var receiptOfDeny = await denyContractFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey, gasEstimationForCancel, null, null);

            }
            catch (Exception e) //if regulator already signed - I didn`t have energy to right a getter in Solidity....
            {
                return false;
            }
            return true;
        }

        public async Task<bool> abort() //in case buyer didnt take action in time
        {
            string SellerAddress = await getOldAssetOwner();
            bool BuyerSign = await getBuyerSign();
            ulong timeLeft = await getTimeLeftInSeconds();

            if (!SellerAddress.Equals(accountCaller.publicKey.ToLower())) //if the caller is not the buyer
                return false;

            if (BuyerSign == true) //if buyer already signed the deal, the seller cannot abort!
                return false;

            if (timeLeft > 0) //if there is a time for the buyer to choose
                return false;

            try
            {
                var abortContractFunction = deployedContractIsntance.GetFunction("abortContract");  //find the method of the contract 
                var gasEstimationForCancel = await abortContractFunction.EstimateGasAsync(accountCaller.publicKey, null, null);
                var receiptOfAbort = await abortContractFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey, gasEstimationForCancel, null, null);

            }
            catch (Exception e) //if regulator already signed - I didn`t have energy to right a getter in Solidity....
            {
                return false;
            }
            return true;
        }

        public async Task<bool> setIsExpired() //For regulator (=Govrenment)
        {
            string GovrenmentAddress = "0x7988dfD8E9ceCb888C1AeA7Cb416D44C6160Ef80";
            if (!GovrenmentAddress.Equals(accountCaller.publicKey)) //if the caller is not the regulator
                return false;
            try
            {
                var setIsExpiredFunction = deployedContractIsntance.GetFunction("setIsExpired");  //find the method of the contract 
                var gasEstimationForCancel = await setIsExpiredFunction.EstimateGasAsync(accountCaller.publicKey, null, null);
                var receiptSetIsExpired = await setIsExpiredFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey, gasEstimationForCancel, null, null);

            }
            catch (Exception e) //if regulator already signed - I didn`t have energy to right a getter in Solidity....
            {
                return false;
            }
            return true;
        }

        public async Task<bool> setBuyerSign() //For regulator (=Govrenment)
        {      
            string buyerAccount = await getBuyerAddress();
            string myBuyerAddress = accountCaller.publicKey.ToLower();
            if (myBuyerAddress.Equals(buyerAccount))
            {
                try
                {
                    var setBuyerSigningFunction = deployedContractIsntance.GetFunction("setBuyerSigning");  //find the method of the contract 
                    var gasEstimationForSigning = await setBuyerSigningFunction.EstimateGasAsync(accountCaller.publicKey, null, null);
                    var receiptSetIsExpired = await setBuyerSigningFunction.SendTransactionAndWaitForReceiptAsync(accountCaller.publicKey, gasEstimationForSigning, null, null);

                }

                catch (Exception e)
                {
                    return false;
                }

            }
            return true;
        }
    }

    internal partial class GetAssetDetailsFunction : GetAssetDetailsFunctionBase { } //this is Ethereum API - no need to check this module!!

    [Function("getAssetDetails", typeof(GetAssetDetailsOutputDTO))]
    internal class GetAssetDetailsFunctionBase : FunctionMessage
    {

    }


    internal partial class GetAssetDetailsOutputDTO : GetAssetDetailsOutputDTOBase { }

    [FunctionOutput]
    internal class GetAssetDetailsOutputDTOBase : IFunctionOutputDTO
    {
        [Parameter("uint256", "AssetID", 1)]
        public virtual BigInteger AssetID { get; set; }
        [Parameter("string", "AssetLoaction", 2)]
        public virtual string AssetLoaction { get; set; }
        [Parameter("uint256", "AssetRooms", 3)]
        public virtual BigInteger AssetRooms { get; set; }
        [Parameter("uint256", "AssetAreaIn", 4)]
        public virtual BigInteger AssetAreaIn { get; set; }
        [Parameter("string", "AssetImageURL", 5)]
        public virtual string AssetImageURL { get; set; }
        [Parameter("uint256", "AssetPrice", 6)]
        public virtual BigInteger AssetPrice { get; set; }
    }

   
}
