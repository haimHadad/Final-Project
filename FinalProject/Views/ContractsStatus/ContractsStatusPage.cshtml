@model FinalProject.Models.DappAccount
@{
    ViewData["Title"] = "ContractsStatus";
    Layout = "/Views/Shared/_LayoutAccount.cshtml";
}

<br />
<h1>Contracts Status</h1>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" data-toggle="tab" href="#OpenContractsTab">Open Contracts</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#ClosedContractsTab">Closed Contracts</a>
    </li>

</ul>

<br />
<br />

<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active show" id="OpenContractsTab">

        <table class=" table table-hover">
            <thead align="center">
                <tr>
                    <th scope="col">Loaction</th>
                    <th scope="col">Your Role</th>
                    <th scope="col">Tracking</th>
                    <th scope="col">Action</th>

                </tr>
            </thead>
            <tbody align="center">
                @foreach (var a in @Model.DeployedContractList)
                {

                    if (Model.publicKey.ToLower().Equals(a.BuyerPublicKey) && a.IsDeniedByBuyer == false && a.BuyerSign == false) //if I am a buyer, and I didn`t sign
                    {
                        var OfferSerialModel = Newtonsoft.Json.JsonConvert.SerializeObject(a);
                        var btnID = "openContract" + a.AssetID;
                        var lblID = "resultOpenContract" + a.AssetID;
                        var loaderID = "DeployLoader" + a.AssetID;
                        <tr>
                            <td>@a.Loaction</td>
                            <td>Buyer</td>
                            <td><a target="_blank" href=@a.EtherscanURL>Here</a></td>
                            <td>
                                <button id=@btnID onclick="LoadOpenContractDetails(@OfferSerialModel)" class="btn btn-primary" data-toggle="modal">Open Contract</button>
                                <img style="display:none" id=@loaderID src="https://s5.gifyu.com/images/LoaderDeploy.gif" alt="LoaderDeploy.gif" border="0" />
                                <label style="display:none;" id=@lblID></label>
                            </td>
                        </tr>
                    }

                    if (Model.publicKey.ToLower().Equals(a.SellerPublicKey) && a.IsDeniedByBuyer == false && a.BuyerSign == false) //if I am a seller
                    {
                        var OfferSerialModel = Newtonsoft.Json.JsonConvert.SerializeObject(a);
                        var loaderID = "DeployLoader" + a.AssetID;
                        var lblCancelID = "lblCancel" + a.AssetID;
                        var btnCancelID = "btnCancelID" + a.AssetID;
                        <tr>
                            <td>@a.Loaction</td>
                            <td>Seller</td>
                            <td><a target="_blank" href=@a.EtherscanURL>Here</a></td>
                            @{
                                if (a.TimeToBeOpen > 0)
                                {
                                    var idAwaitForBuyer = "AwaitFor" + a.AssetID;
                                    <td><label id=@idAwaitForBuyer>Awaiting for buyer signing </label></td>
                                }
                                else
                                {
                                    <td>
                                        <button id=@btnCancelID onclick="ShowExpierdContract(@OfferSerialModel)" class="btn btn-danger" data-toggle="modal">Open to cancel</button>
                                        <img style="display:none" id=@loaderID src="https://s5.gifyu.com/images/LoaderDeploy.gif" alt="LoaderDeploy.gif" border="0" />
                                        <label style="display:none" id=@lblCancelID>Canceled</label>
                                    </td>
                                }
                            }

                        </tr>
                    }

                    if (a.BuyerSign == true && a.RegulatorSign == false && a.IsDeniedByRegulator == false) //if I am a buyer, and I didn`t sign
                    {
                        var OfferSerialModel = Newtonsoft.Json.JsonConvert.SerializeObject(a);

                        <tr>
                            <td>@a.Loaction</td>
                            @{
                                if (a.SellerPublicKey.ToLower().Equals(a.SellerPublicKey))
                                {
                                    <td>Seller</td>
                                }
                                else
                                {
                                    <td>Buyer</td>
                                }
                            }

                            <td><a target="_blank" href=@a.EtherscanURL>Here</a></td>
                            <td>Awaiting for regulator signing</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="modal fade" id="openContractModalDialong" tabindex="-1" role="dialog" aria-labelledby="openContractModalDialongTitle" aria-hidden="true" style="">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="openContractDialogTitle">Contract Offer - &nbsp</h4>
                        <h4 class="modal-title" id="openContractDialogTime"></h4>

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="openContract_dialog_body">

                        <center><img class="w-50 p-3" id="openContractImageURL"></center>
                        <p id="openContractdialogAssetID"></p>
                        <p id="openContractdialogLoaction"></p>
                        <p id="openContractdialogAreaIn"></p>
                        <p id="openContractdialogRooms"></p>
                        <p id="openContractdialogPrice"></p>
                        <p id="">------------------------------------</p>
                        <p id="openContractdialogOwnerID"></p>
                        <p id="openContractdialogOwnerPublicKey"></p>
                        <p id="">------------------------------------</p>
                        <p id="openContractdialogBuyerID"></p>
                        <p id="openContractdialogBuyerPublicKey"></p>
                        <p id="">------------------------------------</p>

                        <input onclick="AllowNotes()" type="checkbox" id="openContractCheckBox"> Add Deny Notes<br>
                        <textarea disabled id="openContractdialogNotes" rows="4" cols="50"></textarea>

                    </div>
                    <div class="modal-footer">

                        <button onclick="DenyContract()" id="openContractDenyBtn" type="button" class="btn btn-danger" data-dismiss="modal">Deny</button>
                        <button onclick="CheckIfSure()" id="openContractSignBtn" type="button" class="btn btn-success" data-dismiss="modal">Sign</button>
                    </div>
                </div>
            </div>
        </div>


        <!--for seller if the contract expierd-->
        <div class="modal fade" id="expierdContractModalDialong" tabindex="-1" role="dialog" aria-labelledby="expierdContractModalDialongTitle" aria-hidden="true" style="">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="expierdContractDialogTitle">Contract Offer - &nbsp</h4>
                        <h4 class="modal-title text-danger" id="expierdContractDialogTime">EXPIERD</h4>

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="expierdContract_dialog_body">

                        <center><img class="w-50 p-3" id="expierdContractImageURL"></center>
                        <p id="expierdContractdialogAssetID"></p>
                        <p id="expierdContractdialogLoaction"></p>
                        <p id="expierdContractdialogAreaIn"></p>
                        <p id="expierdContractdialogRooms"></p>
                        <p id="expierdContractdialogPrice"></p>
                        <p id="">------------------------------------</p>
                        <p id="expierdContractdialogOwnerID"></p>
                        <p id="expierdContractdialogOwnerPublicKey"></p>
                        <p id="">------------------------------------</p>
                        <p id="expierdContractdialogBuyerID"></p>
                        <p id="expierdContractdialogBuyerPublicKey"></p>

                    </div>
                    <div class="modal-footer">

                        <button onclick="CancelDealContract()" id="openContractDenyBtn" type="button" class="btn btn-danger" data-dismiss="modal">Cancel Contract</button>
                    </div>
                </div>
            </div>
        </div>



    </div> <!--End of Open contracts tab-->

    <div class="tab-pane fade" id="ClosedContractsTab">

        <table class=" table table-hover">
            <thead align="center">
                <tr>
                    <th scope="col">Loaction</th>
                    <th scope="col">Your Role</th>
                    <th scope="col">Tracking</th>
                    <th scope="col">Result</th>

                </tr>
            </thead>
            <tbody align="center">
                @foreach (var a in @Model.DeployedContractList)
                {
                    if (a.RegulatorSign == true)
                    {
                        var role = "";
                        var yourPublicKey = Model.publicKey;
                        if (yourPublicKey.ToLower().Equals(a.SellerPublicKey))
                            role = "Seller";
                        else
                            role = "Buyer";
                        var OfferSerialModel = Newtonsoft.Json.JsonConvert.SerializeObject(a);
                        <tr>
                            <td>@a.Loaction</td>
                            <td>@role</td>
                            <td><a target="_blank" href=@a.EtherscanURL>Here</a></td>
                            <td><button onclick="LoadClosedContractDetails(@OfferSerialModel)" class="btn btn-primary" data-toggle="modal" data-target="#closedContractModalDialong">View Details</button></td>
                        </tr>
                    }
                    else if (a.IsDeniedByBuyer == true || a.IsDeniedByRegulator == true)
                    {
                        var role = "";
                        var yourPublicKey = Model.publicKey;
                        if (yourPublicKey.Equals(a.SellerPublicKey))
                            role = "Seller";
                        else
                            role = "Buyer";
                        var OfferSerialModel = Newtonsoft.Json.JsonConvert.SerializeObject(a);
                        <tr>
                            <td>@a.Loaction</td>
                            <td>@role</td>
                            <td><a target="_blank" href=@a.EtherscanURL>Here</a></td>
                            <td><button onclick="LoadClosedContractDetails(@OfferSerialModel)" class="btn btn-primary" data-toggle="modal" data-target="#closedContractModalDialong">View Details</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>


        <div class="modal fade" id="closedContractModalDialong" tabindex="-1" role="dialog" aria-labelledby="closedContractModalDialongTitle" aria-hidden="true" style="">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="closedContractDialogTitle">Closed Contract</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="closedContract_dialog_body">
                        <center><img class="w-50 p-3" id="closedContractImageURL"></center>
                        <p id="closedContractdialogAssetID"></p>
                        <p id="closedContractdialogLoaction"></p>
                        <p id="closedContractdialogAreaIn"></p>
                        <p id="closedContractdialogRooms"></p>
                        <p id="closedContractdialogPrice"></p>
                        <p id="">------------------------------------</p>
                        <p id="closedContractdialogOwnerID"></p>
                        <p id="closedContractdialogOwnerPublicKey"></p>
                        <p id="">------------------------------------</p>
                        <p id="closedContractdialogBuyerID"></p>
                        <p id="closedContractdialogBuyerPublicKey"></p>
                        <p id="">------------------------------------</p>
                        <p id="closedContractdialogNewOwnerID"></p>
                        <p id="closedContractdialogNewOwnerPublicKey"></p>
                        <h5 id="closedContractdialogResult"></h5>
                        <textarea id="closedContractdialogNotes" rows="4" cols="50"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>



    </div> <!--End of closed contracts tab-->


    <div class="modal position-fixed" id="actionDealDialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 id="actionDealDialogTitle" class="modal-title">The contract canceled sucessfully</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div style="display:flex" class="modal-body">


                    <table>
                        <tr>
                            <td>
                                <h5 id="actionDealDialogMessageContent1"></h5>
                                <h5 style="display:none" id="actionDealDialogErrorMessageContent">Cancel operation failed. Try again later.</h5>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <h5 id="actionDealDialogMessageContent2"></h5>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <div style="display:flex">
                                    <h5 id="actionDealDialogMessageContent3">You can track it</h5>
                                    <a style="font-size:16px" target="_blank" id="actionDealDialogEtherscanURL" href="">&nbsp Here.</a>
                                </div>

                                <h5 class="text-danger" style="display:none" id="actionDealDialogMessageContent4"></h5>
                            </td>
                        </tr>

                    </table>

                    <img id="actionConfirmationImg" style="width:70px; height:70px; margin-left:auto;" />

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="DialogBlockchainError" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Error</h4><!--Contract Offer Details-->
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h5>You running out of ETH, please deposit more ETH.</h5>
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeButton" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="DialogBlockchainBeforeApprove" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Are You Sure?</h4><!--Contract Offer Details-->
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h5><strong>After this operation - There is no coming back!!</strong></h5>
                    <h5>-----------------------------------------------------------------------</h5>
                    <h6 id="additionalWarningForSigning"></h6>
                    <small class="text-danger">*The payment will be send to the contract first.</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">No</button>
                    <button onclick="ApproveDeal()" type="button" class="btn btn-success" data-dismiss="modal">Yes</button>

                </div>
            </div>
        </div>
    </div>


</div>


@section scripts
    {

    <script type="text/javascript">

        $(document).ready(function () {
            document.getElementById("contractsStatusNavBar").style.textDecoration = "underline";
            document.getElementById("contractsStatusNavBar").style.fontWeight = "bold";
        });

        function checkEthForDeal(offer)
        {
            var ErrorMsg = "";
            var dealPrice = parseFloat(offer.PriceETH);
            var accountBalance = @Model.EthBalance;
            
            var moneyNeed = accountBalance - dealPrice;
            console.log("Account Balance real to check = "+accountBalance)
            console.log("Money of deal = "+dealPrice)
            console.log("Money that needed = "+moneyNeed)
            if (moneyNeed < 0.005)
            {
                ErrorMsg = ErrorMsg + "You running out of ETH, please deposit more ETH.<br>";
            }
            return ErrorMsg;
        }







        function ApproveDeal()
        {
            var offer = currentContract;
            var ErrorMsg = "";
            ErrorMsg = checkEthForDeal(offer);

            if (ErrorMsg != "") {
                $('#DialogBlockchainError').modal('show');
                console.log(offer);
                return;
            }



            var btnIdApprove = "openContract" + offer.AssetID;
            var lblIdApprove = "resultOpenContract" + offer.AssetID;
            var loaderIdApprove = "DeployLoader" + offer.AssetID;
            document.getElementById(btnIdApprove).style.display = "none";
            document.getElementById(loaderIdApprove).style.display = "block";

            $.ajax({
                    url: "/ContractsStatus/ApproveContract",
                    type: 'POST',
                    async: true,
                    data : { ContractAddress: offer.ContractAddress, PublicKey: offer.BuyerPublicKey },
                    success: function (data)
                    {

                        document.getElementById(lblIdApprove).innerHTML = "Awaiting for regulator signing";
                        document.getElementById(lblIdApprove).style.color = "lightgreen";
                        document.getElementById(lblIdApprove).style.display = "block";
                        document.getElementById(loaderIdApprove).style.display = "none";
                        updateAccountBalanceAfterBlockchainOperation(offer.BuyerPublicKey);
                        var result = JSON.parse(data);
                        var feeILS = result.feeILS;
                        document.getElementById("actionDealDialogTitle").innerHTML = "The contract approved sucessfully";
                        document.getElementById("actionDealDialogMessageContent1").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent2").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent3").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent4").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").href = "https://ropsten.etherscan.io/address/" + result.ContractAddress;
                        document.getElementById("actionDealDialogMessageContent1").innerHTML = "The contract been approved.";
                        document.getElementById("actionDealDialogMessageContent2").innerHTML = "AssetID".bold() + " : " + offer.AssetID + "." + "</br>" + "Loaction".bold() + " : " + offer.Loaction + ".";
                        document.getElementById("actionConfirmationImg").src = "/img/V-symbol.png";
                        var dealPriceILS = offer.PriceILS.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        document.getElementById("actionDealDialogMessageContent4").innerHTML = "You paid : ".bold()+offer.PriceETH +" ETH | ₪"+dealPriceILS+"</br>"+"Fee : ₪"+result.feeILS;
                        $('#actionDealDialog').modal('show');
                    },
                    error: function (xhr, text, error)
                    {
                        updateAccountBalanceAfterBlockchainOperation(offer.BuyerPublicKey)
                        var ErrorMsg = "You running out of ETH, please deposit more ETH.<br>";
                        $('#DialogBlockchainError').modal('show');
                        console.log(offer);
                        document.getElementById(btnIdApprove).style.display = "block";
                        document.getElementById(loaderIdApprove).style.display = "none";
                        return;
                    }
                     
                });



        }

        function CheckIfSure()
        {
            var offer = currentContract;
            var accountBalanceETH = @Model.EthBalance;
            var accountBalanceILS = @Model.IlsBalance;
            accountBalanceILS = accountBalanceILS.toFixed(2);
            accountBalanceILS = accountBalanceILS.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            accountBalanceETH = accountBalanceETH.toFixed(2);

            var dealPriceILS = offer.PriceILS.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

            document.getElementById("additionalWarningForSigning").innerHTML ="Your balance : ".bold() + accountBalanceETH+" ETH |" + " ₪" +accountBalanceILS+"."
                +"</br></br>" + "Deal cost : ".bold() + offer.PriceETH + " ETH |" + " ₪" + dealPriceILS+"."
                + "</br></br>" + "You will pay now : ".bold() + offer.PriceETH + " ETH |" + " ₪" + dealPriceILS+".";
            $('#DialogBlockchainBeforeApprove').modal('show');
        }

        var currentContract;



        function DenyContract() //for buyer
        {
             var offer = currentContract;

            var checkError = checkEthForFee();
            if (checkError != "")
            {
                $('#DialogBlockchainError').modal('show');
                console.log(offer);
                return;
            }
            var notes = document.getElementById("openContractdialogNotes").value;

            var loaderDenyID = "DeployLoader" + offer.AssetID;
            var lblDenyID = "resultOpenContract" + offer.AssetID;
            var btnOpenContractID = "openContract" + offer.AssetID;

            document.getElementById(btnOpenContractID).style.display = "none";
            document.getElementById(loaderDenyID).style.display = "block";

            $.ajax({
                    url: "/ContractsStatus/CancelDealAsBuyer",
                    type: 'POST',
                    async: true,
                    data : { ContractAddress: offer.ContractAddress, Notes: notes, PublicKey:  offer.BuyerPublicKey},
                    success: function (data)
                    {

                        document.getElementById(loaderDenyID).style.display = "none";
                        document.getElementById(lblDenyID).style.display = "block";
                        document.getElementById(lblDenyID).innerHTML = "Denied by the buyer (You)";
                        document.getElementById(lblDenyID).style.color = "red";
                        //timeLeftInView = data;
                        var result = JSON.parse(data);
                        var feeILS = result.feeILS;
                        document.getElementById("actionDealDialogTitle").innerHTML = "The contract denied sucessfully";
                        document.getElementById("actionDealDialogMessageContent1").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent2").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent3").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent4").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").href = "https://ropsten.etherscan.io/address/" + result.ContractAddress;
                        document.getElementById("actionDealDialogMessageContent1").innerHTML = "The contract has denied.";
                        document.getElementById("actionDealDialogMessageContent2").innerHTML = "AssetID".bold() + " : " + offer.AssetID + "." + "</br>" + "Loaction".bold() + " : " + offer.Loaction + ".";
                        document.getElementById("actionConfirmationImg").src = "/img/V-symbol.png";
                        document.getElementById("actionDealDialogMessageContent4").innerHTML = "Fee : ₪" + result.feeILS;
                        $('#actionDealDialog').modal('show');
                        updateAccountBalanceAfterBlockchainOperation(offer.BuyerPublicKey);


                    }
                });


        }




        function checkEthForFee()
        {
            var ErrorMsg = "";
            var accountBalance = @Model.EthBalance;
            if (accountBalance < 0.005)
            {
                ErrorMsg = ErrorMsg + "You running out of ETH, please deposit more ETH.<br>";
            }
            return ErrorMsg;
        }




        function CancelDealContract()
        {
            var offer = currentExpierdDealOffer;

            var loaderID = "DeployLoader" + offer.AssetID;
            var lblCancelID = "lblCancel" + offer.AssetID;
            var btnCancelID = "btnCancelID" + offer.AssetID;

            document.getElementById(btnCancelID).style.display = "none";
            document.getElementById(loaderID).style.display = "block";

            $.ajax({
                    url: "/ContractsStatus/CancelDealAsSeller",
                    type: 'POST',
                    async: true,
                    data : { ContractAddress: offer.ContractAddress, PublicKey: offer.SellerPublicKey  },
                    success: function (data)
                    {
                        document.getElementById(lblCancelID).style.display = "block";
                        document.getElementById(lblCancelID).style.color = "red";
                        document.getElementById(loaderID).style.display = "none";
                        timeLeftInView = data;
                        var result = JSON.parse(data);
                        var feeILS = result.feeILS;
                        document.getElementById("actionDealDialogTitle").innerHTML = "The contract canceled sucessfully";
                        document.getElementById("actionDealDialogMessageContent1").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent2").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent3").style.display = "block";
                        document.getElementById("actionDealDialogMessageContent4").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").style.display = "block";
                        document.getElementById("actionDealDialogEtherscanURL").href = "https://ropsten.etherscan.io/address/" + result.ContractAddress;
                        document.getElementById("actionDealDialogMessageContent1").innerHTML = "The contract has canceled.";
                        document.getElementById("actionDealDialogMessageContent2").innerHTML = "AssetID".bold() + " : " + offer.AssetID + "." + "</br>" + "Loaction".bold() + " : " + offer.Loaction + ".";
                        document.getElementById("actionConfirmationImg").src = "/img/V-symbol.png";
                        document.getElementById("actionDealDialogMessageContent4").innerHTML = "Fee : ₪" + result.feeILS;
                        $('#actionDealDialog').modal('show');
                        updateAccountBalanceAfterBlockchainOperation(offer.SellerPublicKey);

                    }
                });



        }



        var currentExpierdDealOffer;

        function ShowExpierdContract(offer) //for seller
        {
            currentExpierdDealOffer = offer;
            var fullOwnerPublicKey = offer.SellerPublicKey;
            var partOne = fullOwnerPublicKey.substring(0, 12);
            var partTwo = " . . . ";
            var partThree = fullOwnerPublicKey.substring(32, fullOwnerPublicKey.length);
            var ownerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var fullBuyerPublicKey = offer.BuyerPublicKey;
            partOne = fullBuyerPublicKey.substring(0, 12);
            partTwo = " . . . ";
            partThree = fullBuyerPublicKey.substring(32, fullBuyerPublicKey.length);
            var buyerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var yourPublicKey = @Model.publicKey;
            var sellerPublicKey = ownerPublicKeyToShow;
            var sellerID = offer.OwnertID;
            var buyerPublicKey = buyerPublicKeyToShow;
            var buyerID = offer.BuyerID;

                sellerPublicKey = sellerPublicKey + "  &nbsp (You)";
                sellerID = sellerID + " &nbsp (You)";       

            var dealPriceILS = offer.PriceILS.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            var dealPriceETH = offer.PriceETH
            var dealPrice = "" + dealPriceETH + " ETH | ₪" + dealPriceILS;

            document.getElementById("expierdContractImageURL").setAttribute("src", offer.ImageURL);
            document.getElementById("expierdContractdialogAssetID").innerHTML = "Asset No : ".bold() + offer.AssetID;
            document.getElementById("expierdContractdialogLoaction").innerHTML = "Loaction : ".bold() + offer.Loaction;
            document.getElementById("expierdContractdialogAreaIn").innerHTML = "AreaIn : ".bold() + offer.AreaIn +"&nbsp m^2";
            document.getElementById("expierdContractdialogRooms").innerHTML = "Rooms : ".bold() + offer.Rooms;
            document.getElementById("expierdContractdialogOwnerID").innerHTML = "Seller ID : ".bold() + sellerID;
            document.getElementById("expierdContractdialogOwnerPublicKey").innerHTML = "Seller Public-Key : ".bold() + sellerPublicKey;
            document.getElementById("expierdContractdialogBuyerID").innerHTML = "Buyer ID : ".bold() + buyerID;
            document.getElementById("expierdContractdialogBuyerPublicKey").innerHTML = "Buyer Public-Key : ".bold() + buyerPublicKey;
            document.getElementById("expierdContractdialogPrice").innerHTML = "Price : ".bold() + dealPrice


            $('#expierdContractModalDialong').modal('show');





            /*
            */




        }


        function AllowNotes()
        {
            checkBox = document.getElementById("openContractCheckBox").checked;
            if (checkBox == true)
            {

                $('#openContractSignBtn').disabled = true;
                document.getElementById("openContractdialogNotes").placeholder = "Add your notes";
                document.getElementById("openContractdialogNotes").value = "";
                document.getElementById("openContractdialogNotes").disabled = false;
                document.getElementById("openContractSignBtn").disabled = true;
            }

            else
            {
                document.getElementById("openContractdialogNotes").disabled = true;
                document.getElementById("openContractdialogNotes").placeholder = "";
                document.getElementById("openContractdialogNotes").value = "";
                document.getElementById("openContractSignBtn").disabled = false;
            }
            var checkTimeLeft = document.getElementById("openContractDialogTime").textContent;
            if (checkTimeLeft == "EXPIRED")
            {
                document.getElementById("openContractDenyBtn").disabled = true;
                document.getElementById("openContractSignBtn").disabled = true;
            }
        }


        function LoadOpenContractDetails(offer)
        {
            currentContract = offer;
            document.getElementById("openContractDenyBtn").disabled = true;
            document.getElementById("openContractSignBtn").disabled = true;
            document.getElementById("openContractdialogNotes").placeholder = "";
            document.getElementById("openContractdialogNotes").value = "";
            document.getElementById("openContractdialogNotes").disabled = true;
            var timeLeftInView = offer.TimeToBeOpen;
            var contractAddress = offer.ContractAddress;
            if (timeLeftInView != 0)
            {
                $.ajax({
                    url: "/ContractsStatus/GetTimeLeft",
                    type: 'POST',
                    async: false,
                    data : { ContractAddress: contractAddress, PublicKey: offer.BuyerPublicKey  },
                    success: function (data)
                    {

                        timeLeftInView = data;
                    }
                });
            }

            setTimer(timeLeftInView);
            document.getElementById("openContractCheckBox").checked = false;
            var fullOwnerPublicKey = offer.SellerPublicKey;
            var partOne = fullOwnerPublicKey.substring(0, 12);
            var partTwo = " . . . ";
            var partThree = fullOwnerPublicKey.substring(32, fullOwnerPublicKey.length);
            var ownerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var fullBuyerPublicKey = offer.BuyerPublicKey;
            partOne = fullBuyerPublicKey.substring(0, 12);
            partTwo = " . . . ";
            partThree = fullBuyerPublicKey.substring(32, fullBuyerPublicKey.length);
            var buyerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var newOwnerPublicKey = offer.NewOwnerPublicKey;
            var yourPublicKey = @Model.publicKey;
            var sellerPublicKey = ownerPublicKeyToShow;
            var sellerID = offer.OwnertID;
            var buyerPublicKey = buyerPublicKeyToShow;
            var buyerID = offer.BuyerID;

            if (yourPublicKey == offer.SellerPublicKey) {
                sellerPublicKey = sellerPublicKey + "  &nbsp (You)";
                sellerID = sellerID + " &nbsp (You)";
            }

            else
            {
                buyerPublicKey = buyerPublicKey + "  &nbsp (You)";
                buyerID = buyerID + " &nbsp (You)";
            }

            var dealPriceILS = offer.PriceILS.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            var dealPriceETH = offer.PriceETH
            var dealPrice = "" + dealPriceETH + " ETH | ₪" + dealPriceILS;

            document.getElementById("openContractImageURL").setAttribute("src", offer.ImageURL);
            document.getElementById("openContractdialogAssetID").innerHTML = "Asset No : ".bold() + offer.AssetID;
            document.getElementById("openContractdialogLoaction").innerHTML = "Loaction : ".bold() + offer.Loaction;
            document.getElementById("openContractdialogAreaIn").innerHTML = "AreaIn : ".bold() + offer.AreaIn +"&nbsp m^2";
            document.getElementById("openContractdialogRooms").innerHTML = "Rooms : ".bold() + offer.Rooms;
            document.getElementById("openContractdialogOwnerID").innerHTML = "Seller ID : ".bold() + sellerID;
            document.getElementById("openContractdialogOwnerPublicKey").innerHTML = "Seller Public-Key : ".bold() + sellerPublicKey;
            document.getElementById("openContractdialogBuyerID").innerHTML = "Buyer ID : ".bold() + buyerID;
            document.getElementById("openContractdialogBuyerPublicKey").innerHTML = "Buyer Public-Key : ".bold() + buyerPublicKey;
            document.getElementById("openContractdialogPrice").innerHTML = "Price : ".bold() + dealPrice


            $('#openContractModalDialong').modal('show');

        }


        function LoadClosedContractDetails(offer)
        {
            var fullOwnerPublicKey = offer.SellerPublicKey;
            var partOne = fullOwnerPublicKey.substring(0, 12);
            var partTwo = " . . . ";
            var partThree = fullOwnerPublicKey.substring(32, fullOwnerPublicKey.length);
            var ownerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var fullBuyerPublicKey = offer.BuyerPublicKey;
            partOne = fullBuyerPublicKey.substring(0, 12);
            partTwo = " . . . ";
            partThree = fullBuyerPublicKey.substring(32, fullBuyerPublicKey.length);
            var buyerPublicKeyToShow = "" + partOne + partTwo + partThree;

            var newOwnerPublicKey = offer.NewOwnerPublicKey;
            var yourPublicKey = @Model.publicKey;
            var sellerPublicKey = ownerPublicKeyToShow;
            var sellerID = offer.OwnertID;
            var buyerPublicKey = buyerPublicKeyToShow;
            var buyerID = offer.BuyerID;

            if (yourPublicKey == offer.SellerPublicKey) {
                sellerPublicKey = sellerPublicKey + "  &nbsp (You)";
                sellerID = sellerID + " &nbsp (You)";
            }

            else
            {
                buyerPublicKey = buyerPublicKey + "  &nbsp (You)";
                buyerID = buyerID + " &nbsp (You)";
            }

            document.getElementById("closedContractImageURL").setAttribute("src", offer.ImageURL);
            document.getElementById("closedContractdialogAssetID").innerHTML = "Asset No : ".bold() + offer.AssetID;
            document.getElementById("closedContractdialogLoaction").innerHTML = "Loaction : ".bold() + offer.Loaction;
            document.getElementById("closedContractdialogAreaIn").innerHTML = "AreaIn : ".bold() + offer.AreaIn +"&nbsp m^2";
            document.getElementById("closedContractdialogRooms").innerHTML = "Rooms : ".bold() + offer.Rooms;
            document.getElementById("closedContractdialogOwnerID").innerHTML = "Seller ID : ".bold() + sellerID;
            document.getElementById("closedContractdialogOwnerPublicKey").innerHTML = "Seller Public-Key : ".bold() + sellerPublicKey;
            document.getElementById("closedContractdialogBuyerID").innerHTML = "Buyer ID : ".bold() + buyerID;
            document.getElementById("closedContractdialogBuyerPublicKey").innerHTML = "Buyer Public-Key : ".bold() + buyerPublicKey;
            document.getElementById("closedContractdialogNotes").innerHTML = ""+offer.DenyReason;

            if (offer.RegulatorSign == true)
            {
                var newOwnerID = offer.NewOwnerID;
                partOne = newOwnerPublicKey.substring(0, 12);
                partTwo = " . . . ";
                partThree = newOwnerPublicKey.substring(32, newOwnerPublicKey.length);
                var newOwnerPublicKeyToShow = "" + partOne + partTwo + partThree;
                if (yourPublicKey == offer.NewOwnerPublicKey)
                {
                newOwnerPublicKeyToShow = newOwnerPublicKeyToShow + "  &nbsp (You)";
                newOwnerID = newOwnerID + "  &nbsp (You)";
                }
                document.getElementById("closedContractdialogNewOwnerID").innerHTML = "New Owner Public-key: ".bold() + newOwnerID;
                document.getElementById("closedContractdialogNewOwnerPublicKey").innerHTML = "New Owner ID : ".bold() +newOwnerPublicKeyToShow ;
                document.getElementById("closedContractdialogResult").innerHTML = "Approved".bold();
                document.getElementById("closedContractdialogResult").style.color = "green";
                document.getElementById("closedContractdialogPrice").innerHTML = "Price : ".bold() + offer.PriceETH + " ETH / ₪" + offer.PriceILS;
                document.getElementById("closedContractdialogNotes").style.display = "none";
            }


            else if (offer.IsDeniedByBuyer == true)
            {
                document.getElementById("closedContractdialogResult").innerHTML = "Denied By Buyer".bold();
                document.getElementById("closedContractdialogResult").style.color = "red";
                document.getElementById("closedContractdialogNotes").style.display = "block";
                document.getElementById("closedContractdialogPrice").innerHTML = "";
                document.getElementById("closedContractdialogNewOwnerID").innerHTML = "";
                document.getElementById("closedContractdialogNewOwnerPublicKey").innerHTML = "";

            }

            else if (offer.IsDeniedByRegulator == true)
            {
                document.getElementById("closedContractdialogResult").innerHTML = "Denied By Regulator".bold();
                document.getElementById("closedContractdialogResult").style.color = "red";
                document.getElementById("closedContractdialogNotes").style.display = "block";
                document.getElementById("closedContractdialogPrice").innerHTML = "";
                document.getElementById("closedContractdialogNewOwnerID").innerHTML = "";
                document.getElementById("closedContractdialogNewOwnerPublicKey").innerHTML = "";
            }

        }




    var interval;
    function setTimer(timeLeftInSeconds)
    {
        console.log("time left -- "+timeLeftInSeconds);
        clearInterval(interval)

        var timeSpan = convert(timeLeftInSeconds);
        console.log(timeSpan);
        //var countDownDate = new Date("Jan 5, 2021 15:37:25").getTime();
        var countDownDate = new Date(timeSpan).getTime();

        // Update the count down every 1 second
        interval = setInterval(function()
        {
            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;
            document.getElementById("openContractDialogTime").style.color = "lightgreen";
            document.getElementById("openContractDenyBtn").disabled = false;
            var checkBoxValue = document.getElementById("openContractCheckBox").checked;
            if (checkBoxValue == true) {
                document.getElementById("openContractSignBtn").disabled = true;
            }
            else
            {
                document.getElementById("openContractSignBtn").disabled = false;
            }
            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="demo"
            //document.getElementById("demo").innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
            document.getElementById("openContractDialogTime").innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";


            // If the count down is over, write some text
            if (distance < 0)
            {
                clearInterval(interval);
                //document.getElementById("demo").innerHTML = "EXPIRED";
                document.getElementById("openContractDialogTime").innerHTML = "EXPIRED";
                document.getElementById("openContractDialogTime").style.color = "red";
                document.getElementById("openContractDenyBtn").disabled = true;
                document.getElementById("openContractSignBtn").disabled = true;
            }
            }, 1000);


    }

    function convert(timeLeft)
    {
    var now = new Date()
    var secondsSinceEpoch = Math.round(now.getTime() / 1000)

     // Unixtimestamp
     var unixtimestamp = timeLeft;
     unixtimestamp = parseInt(unixtimestamp);
     secondsSinceEpoch = parseInt(secondsSinceEpoch);
     unixtimestamp = unixtimestamp +  secondsSinceEpoch;
     // Months array
     var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];

     // Convert timestamp to milliseconds
     var date = new Date(unixtimestamp*1000);

     // Year
     var year = date.getFullYear();

     // Month
     var month = months_arr[date.getMonth()];

     // Day
     var day = date.getDate();

     // Hours
     var hours = date.getHours();

     // Minutes
     var minutes = "0" + date.getMinutes();

    // Seconds
     var seconds = "0" + date.getSeconds();

     // Display date time in MM-dd-yyyy h:m:s format
     var convdataTime = month+' '+day+', '+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
     //"Jan 5, 2021 15:37:25"
     //document.getElementById('datetime').innerHTML = convdataTime;
        console.log("Time left date-->"+convdataTime);
     return convdataTime;
    }

    </script>
    }